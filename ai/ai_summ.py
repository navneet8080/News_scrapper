# import requests
# import json
# import pandas as pd
# from datetime import datetime
# from pathlib import Path

# # ЁЯФз Configuration
# API_KEY = "AIzaSyCDLW5oGmEziI1J9HdHqkH_jGR0pgJAtMY"  # <-- ЁЯФБ Paste your actual API Key here
# MODEL_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={API_KEY}"

# INPUT_DIR = Path("combined")
# OUTPUT_DIR = Path("output")
# TIMESTAMP = datetime.now().strftime("%d_%b_%Y_%H%M")
# OUTPUT_FILE = OUTPUT_DIR / f"summary_{TIMESTAMP}.txt"

# def get_latest_excel():
#     files = sorted(INPUT_DIR.glob("*.xlsx"), key=lambda x: x.stat().st_mtime, reverse=True)
#     if not files:
#         raise FileNotFoundError("тЭМ No input Excel file found in 'combined' directory.")
#     return files[0]

# def build_prompt(news_list):
#     prompt = (
#         "рдЖрдкрдХреЗ рдкрд╛рд╕ рд╡рд┐рднрд┐рдиреНрди рд╕рдорд╛рдЪрд╛рд░ рд╕реНрд░реЛрддреЛрдВ рд╕реЗ рдкреНрд░рд╛рдкреНрдд 300 рд╕рдорд╛рдЪрд╛рд░ рд╢реАрд░реНрд╖рдХреЛрдВ рдХреА рдПрдХ рд╕реВрдЪреА рд╣реИред рдХреГрдкрдпрд╛ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рд╢реАрд░реНрд╖рдХреЛрдВ рдореЗрдВ рд╕реЗ "
#         "50 рд╕рдмрд╕реЗ рдорд╣рддреНрд╡рдкреВрд░реНрдг, рдЕрджреНрд╡рд┐рддреАрдп рдФрд░ рддрд╛рдЬрд╝рд╛ рд╕рдорд╛рдЪрд╛рд░ рдЪреБрдиреЗрдВред рд╣рд░ рд╕рдорд╛рдЪрд╛рд░ рдХреЛ 7 рд╕реЗ 8 рд╢рдмреНрджреЛрдВ рдореЗрдВ рд╕рдВрдХреНрд╖реЗрдк рдореЗрдВ рдПрдХрджрдо рд╕реНрдкрд╖реНрдЯ, рдкреНрд░рднрд╛рд╡рд╢рд╛рд▓реА "
#         "рдФрд░ рдмреНрд░реЗрдХрд┐рдВрдЧ рдиреНрдпреВрдЬрд╝ рд╢реИрд▓реА рдореЗрдВ рд╣рд┐рдВрджреА рдореЗрдВ рд▓рд┐рдЦреЗрдВред\n\nтЮбя╕П рдзреНрдпрд╛рди рджреЗрдВ:\n"
#         "1. рдХреЗрд╡рд▓ рд╡рд╣реА рд╕рдорд╛рдЪрд╛рд░ рдЪреБрдиреЗрдВ рдЬреЛ рдЕрджреНрд╡рд┐рддреАрдп рд╣реЛрдВ тАФ рдПрдХ рдЬреИрд╕реА рдпрд╛ рджреЛрд╣рд░рд╛рдП рдЧрдП рд╢реАрд░реНрд╖рдХреЛрдВ рдХреЛ рд╣рдЯрд╛ рджреЗрдВред\n"
#         "2. рд╣рд░ рд╣реЗрдбрд▓рд╛рдЗрди рдЫреЛрдЯреЗ рд╡рд╛рдХреНрдп рдХреЗ рд░реВрдк рдореЗрдВ рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдП, рдЬреИрд╕реЗ рдХрд┐ рдЯреАрд╡реА рдкрд░ рдЪрд▓рдиреЗ рд╡рд╛рд▓реЗ рдмреНрд░реЗрдХрд┐рдВрдЧ рдиреНрдпреВрдЬрд╝ рдлреНрд▓реИрд╢ред\n"
#         "3. рдХреЛрдИ рднреВрдорд┐рдХрд╛ рдпрд╛ рд╕реНрдкрд╖реНрдЯреАрдХрд░рдг рди рджреЗрдВ, рдХреЗрд╡рд▓ 1 рд╕реЗ 50 рддрдХ рдЕрдВрдХрд┐рдд рд╣реЗрдбрд▓рд╛рдЗрди рд╕реВрдЪреА рдХреЗ рд░реВрдк рдореЗрдВ рдЙрддреНрддрд░ рджреЗрдВред\n"
#         "4. рдЖрдЙрдЯрдкреБрдЯ рдХреЗрд╡рд▓ рд╣реЗрдбрд▓рд╛рдЗрди рд╣реЛ тАФ рдмреАрдЪ рдореЗрдВ рдХреЛрдИ рдиреЛрдЯ, рдЕрдиреБрдЪреНрдЫреЗрдж рдпрд╛ рд╡рд┐рд╡рд░рдг рди рд╣реЛред\n"
#         "5. рд╕рднреА рд╣реЗрдбрд▓рд╛рдЗрди рдкреВрд░реНрдгрддрдГ рд╣рд┐рдВрджреА рднрд╛рд╖рд╛ рдореЗрдВ рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдП, рдЕрдВрдЧреНрд░реЗрдЬрд╝реА рд╢рдмреНрдж рди рд╣реЛрдВред\n\n"
#         "рд╕рдорд╛рдЪрд╛рд░ рд╢реАрд░реНрд╖рдХ:\n"
#     )
#     for idx, news in enumerate(news_list[:300], 1):
#         prompt += f"{idx}. {news.strip()}\n"
#     return prompt

# def call_gemini_api(prompt_text):
#     headers = {"Content-Type": "application/json"}
#     payload = {
#         "contents": [
#             {
#                 "parts": [
#                     {
#                         "text": prompt_text
#                     }
#                 ]
#             }
#         ]
#     }
#     response = requests.post(MODEL_URL, headers=headers, data=json.dumps(payload))
#     response.raise_for_status()
#     result = response.json()
#     return result["candidates"][0]["content"]["parts"][0]["text"]

# def main():
#     print("ЁЯУВ Loading Excel file...")
#     excel_path = get_latest_excel()
#     df = pd.read_excel(excel_path)
#     news_list = df["news"].dropna().tolist()

#     print("ЁЯза Generating prompt for Gemini API...")
#     final_prompt = build_prompt(news_list)

#     print("ЁЯЪА Sending request to Gemini model...")
#     result = call_gemini_api(final_prompt)

#     OUTPUT_DIR.mkdir(exist_ok=True)
#     OUTPUT_FILE.write_text(result, encoding="utf-8")
#     print(f"тЬЕ Headlines saved at: {OUTPUT_FILE}")

# if __name__ == "__main__":
#     main()


import requests
import pandas as pd
from datetime import datetime
from pathlib import Path

# ==== CONFIGURATION ====
API_KEY = "AIzaSyCDLW5oGmEziI1J9HdHqkH_jGR0pgJAtMY"  # Replace with your actual API key
GEMINI_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={API_KEY}"
COMBINED_DIR = Path("combined")
OUTPUT_DIR = Path("output")
OUTPUT_DIR.mkdir(exist_ok=True)


# ==== FUNCTIONS ====
def load_latest_news_file():
    files = sorted(COMBINED_DIR.glob("*.xlsx"), key=lambda x: x.stat().st_mtime, reverse=True)
    if not files:
        raise FileNotFoundError("тЭМ No combined Excel file found.")
    return pd.read_excel(files[0])

def prepare_news_block(news_list):
    return "\n".join([f"{i+1}. {title}" for i, title in enumerate(news_list)])

def build_prompt(news_block):
    return f"""
рдЖрдкрдХреЗ рдкрд╛рд╕ рд╡рд┐рднрд┐рдиреНрди рд╕рдорд╛рдЪрд╛рд░ рд╕реНрд░реЛрддреЛрдВ рд╕реЗ рдкреНрд░рд╛рдкреНрдд 300 рд╕рдорд╛рдЪрд╛рд░ рд╢реАрд░реНрд╖рдХреЛрдВ рдХреА рдПрдХ рд╕реВрдЪреА рд╣реИред рдХреГрдкрдпрд╛ рдЗрди рд╢реАрд░реНрд╖рдХреЛрдВ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рдХреЗ 50 рд╕рдмрд╕реЗ рдорд╣рддреНрд╡рдкреВрд░реНрдг, рддрд╛рдЬрд╝рд╛, рдФрд░ рдЕрджреНрд╡рд┐рддреАрдп рд╕рдорд╛рдЪрд╛рд░реЛрдВ рдХреЛ рдЪреБрдиреЗрдВ рдФрд░ рдЙрдиреНрд╣реЗрдВ рдЕрд▓рдЧ-рдЕрд▓рдЧ рд╢реНрд░реЗрдгрд┐рдпреЛрдВ рдореЗрдВ рд╡рд░реНрдЧреАрдХреГрдд рдХрд░реЗрдВред

ЁЯУМ рдирд┐рд░реНрджреЗрд╢:

1. рдХреБрд▓ 50 рд╢реАрд░реНрд╖рдХ рддреИрдпрд╛рд░ рдХрд░реЗрдВ рдФрд░ рдЙрдиреНрд╣реЗрдВ рдиреАрдЪреЗ рджреА рдЧрдИ рд╢реНрд░реЗрдгрд┐рдпреЛрдВ рдореЗрдВ рдмрд╛рдБрдЯреЗрдВ:
   - ЁЯПЫя╕П рд░рд╛рд╖реНрдЯреНрд░реАрдп
   - ЁЯМН рдЕрдВрддрд░рд░рд╛рд╖реНрдЯреНрд░реАрдп
   - ЁЯПЫя╕П рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢
   - ЁЯЧ│я╕П рд░рд╛рдЬрдиреАрддрд┐
   - ЁЯПП рдЦреЗрд▓
   - ЁЯМР рддрдХрдиреАрдХ/рд╡реНрдпрд╛рдкрд╛рд░/рдЕрдиреНрдп

2. рдкреНрд░рддреНрдпреЗрдХ рд╢реАрд░реНрд╖рдХ рдмреНрд░реЗрдХрд┐рдВрдЧ рдиреНрдпреВрдЬрд╝ рдХреА рд╢реИрд▓реА рдореЗрдВ рд╕реНрдкрд╖реНрдЯ рдФрд░ рдкреНрд░рднрд╛рд╡рд╢рд╛рд▓реА рд╣реЛред рд▓рдВрдмрд╛рдИ рдЕрдзрд┐рдХрддрдо 12 рд╢рдмреНрджреЛрдВ рддрдХ рд╣реЛред

3. рдХреЗрд╡рд▓ рдореВрд▓рднреВрдд рддрдереНрдп рд░рдЦреЗрдВ тАФ рд╡рд┐рд╢реНрд▓реЗрд╖рдг, рд╡рд┐рд╡рд░рдг рдпрд╛ рд╕реНрдкрд╖реНрдЯреАрдХрд░рдг рд╢рд╛рдорд┐рд▓ рди рдХрд░реЗрдВред

4. рджреЛрд╣рд░рд╛рдП рдЧрдП рдпрд╛ рдорд┐рд▓рддреЗ-рдЬреБрд▓рддреЗ рд╢реАрд░реНрд╖рдХреЛрдВ рдХреЛ рд╣рдЯрд╛рдПрдВред

5. рдЙрддреНрддрд░ рдХреЗрд╡рд▓ рдирд┐рдореНрди рдлреЙрд░реНрдореЗрдЯ рдореЗрдВ рджреЗрдВ:

рд░рд╛рд╖реНрдЯреНрд░реАрдп:
1. <рд╣реЗрдбрд▓рд╛рдЗрди>
2. <рд╣реЗрдбрд▓рд╛рдЗрди>
...

6. рд╕рднреА рд╣реЗрдбрд▓рд╛рдЗрди рдкреВрд░реА рддрд░рд╣ рд╕реЗ рд╣рд┐рдВрджреА рдореЗрдВ рд╣реЛрдВ, рдЕрдВрдЧреНрд░реЗрдЬрд╝реА рд╢рдмреНрджреЛрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рди рдХрд░реЗрдВред

ЁЯУ░ рдХреГрдкрдпрд╛ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рд╕рдорд╛рдЪрд╛рд░ рд╢реАрд░реНрд╖рдХреЛрдВ рдХреЛ рдкрдврд╝реЗрдВ рдФрд░ рдКрдкрд░ рджрд┐рдП рдирд┐рд░реНрджреЗрд╢реЛрдВ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдЙрддреНрддрд░ рджреЗрдВ:

{news_block}
"""

def call_gemini_api(prompt_text):
    response = requests.post(
        GEMINI_URL, headers={"Content-Type": "application/json"}, json={"contents": [{"parts": [{"text": prompt_text}]}]}
    )
    if response.status_code != 200:
        raise Exception(f"Gemini API Error: {response.status_code} - {response.text}")
    candidates = response.json().get("candidates", [])
    return candidates[0]['content']['parts'][0]['text'] if candidates else "тЭМ рдХреЛрдИ рдЙрддреНрддрд░ рдирд╣реАрдВ рдорд┐рд▓рд╛ред"


# ==== MAIN ====
def main():
    print("ЁЯУВ Loading latest news titles...")
    df = load_latest_news_file()
    headlines = df["news"].dropna().astype(str).tolist()[:300]
    news_block = prepare_news_block(headlines)

    print("тЬНя╕П Preparing structured prompt for Gemini...")
    prompt = build_prompt(news_block)

    print("ЁЯФЧ Sending prompt to Gemini API...")
    result = call_gemini_api(prompt)

    timestamp = datetime.now().strftime("%d_%b_%Y_%H%M")
    out_file = OUTPUT_DIR / f"summary_{timestamp}.txt"
    out_file.write_text(result, encoding="utf-8")

    print(f"тЬЕ Summary saved to {out_file}")


if __name__ == "__main__":
    main()